// Generated by CoffeeScript 1.6.3
(function() {
  var Project, eventEmitter, events, http, urlPrefix, urlSuffix,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  http = require('http');

  events = require('events');

  eventEmitter = new events.EventEmitter();

  urlPrefix = "http://192.168.0.152:8080/job/";

  urlSuffix = "/api/json";

  Project = (function(_super) {
    __extends(Project, _super);

    Project.prototype.status = null;

    Project.prototype.blinking = false;

    function Project(name, event) {
      this.name = name;
      this.url = urlPrefix + name + urlSuffix;
      this.events = event;
      this.setGrabTime(5010);
      this.setEmitTime(900);
      setTimeout(this.emitStatus, this.checktime);
      this.grabStatus();
    }

    Project.prototype.getName = function() {
      return this.name;
    };

    Project.prototype.setName = function(name) {
      return this.name = name;
    };

    Project.prototype.getEmitTime = function() {
      return this.emittime;
    };

    Project.prototype.setEmitTime = function(time) {
      return this.emittime = time;
    };

    Project.prototype.getGrabTime = function() {
      return this.grabtime;
    };

    Project.prototype.setGrabTime = function(time) {
      return this.grabtime = time;
    };

    Project.prototype.emitStatus = function() {
      this.emit('projectStatus', {
        status: this.status,
        blinking: this.blinking
      });
      return setTimeout(this.emitStatus, this.checktime);
    };

    Project.prototype.setStatus = function(status, blinking) {
      this.status = status;
      return this.blinking = blinking;
    };

    Project.prototype.grabStatus = function() {
      var getter;
      getter = http.get(this.url, function(res) {
        var body,
          _this = this;
        body = '';
        res.on('data', function(chunk) {
          return body += chunk;
        });
        return res.on('end', function() {
          return _this.parseStatus(body);
        });
      });
      getter.on('error', function(error) {
        return console.log("Error getting data for " + this.name + ":", error);
      });
      return setTimeout(this.grabStatus, this.grabtime);
    };

    Project.prototype.parseStatus = function(string) {
      var data, e, flashing, status;
      try {
        data = JSON.parse(string);
      } catch (_error) {
        e = _error;
        console.log("Unable to parse string: ", e);
        return;
      }
      if (data === void 0) {
        return;
      }
      flashing = 0;
      switch (data.color) {
        case "blue_anime":
          flashing = 1;
          status = 1;
          break;
        case "yellow_anime":
          flashing = 1;
          status = 2;
          break;
        case "red_anime":
          flashing = 1;
          status = 3;
          break;
        case "blue":
          status = 1;
          break;
        case "yellow":
          status = 2;
          break;
        case "red":
          status = 3;
      }
      return this.setStatus(status, flashing);
    };

    return Project;

  })(eventEmitter);

}).call(this);
